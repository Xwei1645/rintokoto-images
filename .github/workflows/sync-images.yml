name: Sync images

on:
  workflow_dispatch:

env:
  UPSTREAM_OWNER: RinLit-233-shiroko
  UPSTREAM_REPO: Rin-sHub
  UPSTREAM_PATH: updates/images
  LOCAL_DIR: images

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Fetch upstream file list (flat file names only)
        id: fetch-upstream
        run: |
          curl -sL \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ env.UPSTREAM_OWNER }}/${{ env.UPSTREAM_REPO }}/git/trees/main?recursive=1" \
            > tree.json

          # 只保留文件名，去掉子目录
          jq -r '
            .tree[] |
            select(.type == "blob") |
            select(.path | startswith("${{ env.UPSTREAM_PATH }}/")) |
            select(.path | test("\\.(png|jpe?g|gif|svg|webp|bmp|ico)$"; "i")) |
            (.path | split("/")[-1])          # 取最后一个 / 后的文件名
          ' tree.json | sort | uniq > upstream.list

          echo "Upstream image count: $(wc -l < upstream.list)"

      - name: Build local file list (flat)
        run: |
          mkdir -p "${{ env.LOCAL_DIR }}"
          cd "${{ env.LOCAL_DIR }}"

          # 本地也只列文件名
          find . -maxdepth 1 -type f -printf '%f\n' | sort > ../local.list
          cd ..
          echo "Local image count: $(wc -l < local.list)"

      - name: Find images to download
        id: diff
        run: |
          comm -23 upstream.list local.list > download.list
          cnt=$(wc -l < download.list)
          echo "Files to download: $cnt"
          jq -Rsc 'split("\n") | .[:-1]' download.list > files.json
          echo "files_to_download=$(cat files.json)" >> $GITHUB_OUTPUT

      - name: Download missing images
        if: steps.diff.outputs.files_to_download != '[]'
        shell: bash
        run: |
          jq -r '.[]' <<< '${{ steps.diff.outputs.files_to_download }}' | while IFS= read -r filename; do
            # 重新拼出上游路径（含子目录）以便下载
            upstream_path="${{ env.UPSTREAM_PATH }}"
            # 从 tree.json 找到该文件名对应的完整路径
            full_path=$(jq -r --arg fname "$filename" '
              .tree[]
              | select(.type == "blob")
              | select(.path | startwith("${{ env.UPSTREAM_PATH }}/"))
              | select(.path | split("/")[-1] == $fname)
              | .path
            ' tree.json | head -n 1)

            if [[ -z "$full_path" ]]; then
              echo "⚠️  $filename not found in upstream tree, skipped"
              continue
            fi

            encoded_path=$(printf '%s' "$full_path" | jq -sRr @uri)
            local_file="${{ env.LOCAL_DIR }}/$filename"

            echo "Downloading $filename ..."
            curl --fail -sL -o "$local_file" \
              "https://raw.githubusercontent.com/${{ env.UPSTREAM_OWNER }}/${{ env.UPSTREAM_REPO }}/main/${encoded_path}" \
              && echo "✅ OK" \
              || echo "⚠️  Failed, skipped: $filename"
          done

      - name: Commit & push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "${{ env.LOCAL_DIR }}"
          if ! git diff --cached --quiet; then
            git commit -m "Sync images $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
            git push
          else
            echo "Nothing new to commit."
          fi